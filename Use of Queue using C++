#include <iostream>

const int MAX_SIZE = 5;

class Queue {
private:
    int front, rear;
    int arr[MAX_SIZE];
public:
    Queue() {
        front = rear = -1;
    }

    bool enqueue(int value) {
        if ((front == 0 && rear == MAX_SIZE - 1) || (rear == (front - 1) % (MAX_SIZE - 1))) {
            std::cout << "Queue is full. Cannot enqueue element " << value << std::endl;
            return false;
        } else if (front == -1) {
            front = rear = 0;
            arr[rear] = value;
        } else if (rear == MAX_SIZE - 1 && front != 0) {
            rear = 0;
            arr[rear] = value;
        } else {
            arr[++rear] = value;
        }
        return true;
    }

    int dequeue() {
        if (front == -1) {
            std::cout << "Queue is empty. Cannot dequeue element." << std::endl;
            return -1;
        }

        int value = arr[front];
        if (front == rear) {
            front = rear = -1;
        } else if (front == MAX_SIZE - 1) {
            front = 0;
        } else {
            front++;
        }
        return value;
    }

    void display() {
        if (front == -1) {
            std::cout << "Queue is empty." << std::endl;
            return;
        }

        std::cout << "Queue elements: ";
        if (front <= rear) {
            for (int i = front; i <= rear; i++) {
                std::cout << arr[i] << " ";
            }
        } else {
            for (int i = front; i < MAX_SIZE; i++) {
                std::cout << arr[i] << " ";
            }
            for (int i = 0; i <= rear; i++) {
                std::cout << arr[i] << " ";
            }
        }
        std::cout << std::endl;
    }
};

int main() {
    Queue myQueue;

    myQueue.enqueue(1);
    myQueue.enqueue(2);
    myQueue.enqueue(3);

    myQueue.display();

    int dequeuedValue = myQueue.dequeue();
    std::cout << "Dequeued element: " << dequeuedValue << std::endl;

    myQueue.enqueue(4);
    myQueue.enqueue(5);
    myQueue.enqueue(6);

    myQueue.display();

    return 0;
}
